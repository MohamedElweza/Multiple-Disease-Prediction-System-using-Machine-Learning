# -*- coding: utf-8 -*-
"""Blood_pressure.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1poOs9y8VrBoPl2S5R7G23dJaotFPOluh
"""

# importing required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import confusion_matrix
from pandas.core.common import standardize_mapping
from sklearn.metrics import accuracy_score

# data collection and analysis
# loading the diabetes dataset to pandas dataframe
pressure_dataset= pd.read_csv("/content/pressure.csv")

# printing the frist 5 rows of the dataset
pressure_dataset.head()

# number of rows and columns in this dataset
pressure_dataset.shape

# getting the statistical measueres of the data
pressure_dataset.describe()

pressure_dataset["hyper"].value_counts()

pressure_dataset.isnull().sum()

# separating the data and labels
X = pressure_dataset.drop(columns="hyper", axis=1)
Y = pressure_dataset["hyper"]

#scaler = StandardScaler()
#scaler.fit(x)
#standardize_data = scaler.transform(x)

#x = standardize_data

print(X)

print(Y)

# Train Test Split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size= 0.2, stratify=Y, random_state = 4)

print(X.shape,X_train.shape, X_test.shape)

# Training The Model
classifier = svm.SVC(kernel = 'linear')

# training the support vector machine classifier
model = classifier.fit(X_train,Y_train)

# accuracy score on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the testing data
X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy score of the test data : ', testing_data_accuracy)

input_data = (17,0,25,16,84,99,85,142)
input_data_as_numpy_array= np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = classifier.predict(input_data_reshaped)
if(prediction[0] == 0):
  print("the person does not have Blood pressue")
else:
  print("the person have Blood pressue")

import pickle

filename = 'pressure_model.sav'
pickle.dump(model, open(filename, 'wb'))

for column in X.columns:
  print(column)

