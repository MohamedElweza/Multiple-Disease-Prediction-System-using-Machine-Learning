# -*- coding: utf-8 -*-
"""Lung cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gHdQjq3g6leb_gnHuCkgEkUoNZ38nZsf
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

# loading the diabetes dataset to a pandas DataFrame
cancer_dataset = pd.read_csv('/content/survey lung cancer.csv')

# printing the first 5 rows of the dataset
cancer_dataset.head()

# number of rows and Columns in this dataset
cancer_dataset.shape

# getting the statistical measures of the data
cancer_dataset.describe()

cancer_dataset['LUNG_CANCER'].value_counts()

cancer_dataset.groupby('LUNG_CANCER').mean()

# separating the data and labels
X = cancer_dataset.drop(columns = ['LUNG_CANCER', 'GENDER'], axis=1)
Y = cancer_dataset['LUNG_CANCER']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=4)

print(X.shape, X_train.shape, X_test.shape)

model = svm.SVC(kernel='linear')

# training the SVM model with training data
model.fit(X_train, Y_train)

# accuracy score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy score of training data : ', training_data_accuracy)

# accuracy score on training data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy score of test data : ', test_data_accuracy)

input_data = (67,2,2,2,1,2,1,1,1,1,1,2,2,2)

# changing input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)


if (prediction[0] == 0):
  print("The Person doesn't have a lung cancer")

else:
  print("The Person has a lung cancer")

import pickle

filename = 'cancer_model.sav'
pickle.dump(model, open(filename, 'wb'))

# loading the saved model
loaded_model = pickle.load(open('cancer_model.sav', 'rb'))

for column in X.columns:
  print(column)

