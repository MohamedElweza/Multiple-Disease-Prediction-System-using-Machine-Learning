# -*- coding: utf-8 -*-
"""obesity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-v83OgpnpW_0p9ZUwwpwlhKn9wF7DIkV
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

obesity_dataset = pd.read_csv('/content/ObesityDataSet (1).csv')

obesity_dataset.head()

obesity_dataset.shape

obesity_dataset.describe()

obesity_dataset['obesity_level'].value_counts()

obesity_dataset.groupby('obesity_level').mean()

X = obesity_dataset.drop(columns = 'obesity_level', axis=1)
Y = obesity_dataset['obesity_level']

print(X)

print(Y)

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = obesity_dataset['obesity_level']

print(X)
print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train, Y_train)

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

input_data = (1,22,1.78,89.8,0,0,2,1,2,0,2,0,0,0,2)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)
if (prediction[0] >= 0):
  print('The person is not fat')
else:
  print('The person is fat')